name: CI-CD

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create updated Morpheus-Lumerin-Node release'
        required: true
        type: boolean
        
  push:
    branches:
      - main
      - test
      - dev
    paths: ['.github/workflows/**', '**/Makefile', '**/*.go', '**/*.json', '**/*.yml', '**/*.ts', '**/*.js', 'proxy-router/Dockerfile']

  pull_request:
    types: [opened, reopened, synchronize]
    paths: ['.github/workflows/**', '**/Makefile', '**/*.go', '**/*.json', '**/*.yml', '**/*.ts', '**/*.js', 'proxy-router/Dockerfile']

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  LLAMA_URL: https://github.com/ggerganov/llama.cpp/releases/download
  LLAMA_RELEASE: b4354 
  LLAMA_FILEBASE: llama-b4354-bin
  MODEL_URL: https://huggingface.co
  MODEL_NAME: tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf
  MODEL_OWNER: TheBloke
  MODEL_REPO: TinyLlama-1.1B-Chat-v1.0-GGUF  
  
jobs:
        
  Ubuntu-22-x64:
    name: Build Ubuntu Image
    if: |
      github.repository != 'MorpheusAIs/Morpheus-Lumerin-Node' &&
      (
        (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test' || github.ref == 'refs/heads/dev')) ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      )
    
    runs-on: ubuntu-22.04
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Generate Tag Name
        uses: ./.github/actions/gen_tag_name    

      - name: Verify environment variables
        run: |
          echo "TAG_NAME=${{ env.TAG_NAME }}"
          echo "VTAG=${{ env.VTAG }}"
          echo "VFULL=${{ env.VFULL }}" 
          echo "IMAGE_NAME_BASE=${{ env.IMAGE_NAME_BASE }}"
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"       

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          cache-dependency-path: |
            launcher/go.sum
            proxy-router/go.sum

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
          cache-dependency-path: ui-desktop/yarn.lock

      - name: Install dependencies
        run: |
          cd launcher
          go mod tidy
          cd ../proxy-router
          go mod download
          cd ../ui-desktop
          yarn install --network-timeout 600000

      - name: Copy Environment Files
        uses: ./.github/actions/copy_env_files

      - name: Build
        id: build
        run: |
          cd launcher
          make
          cd ../proxy-router
          make build
          cd ../cli
          make build
          cd ../ui-desktop
          echo "Injecting version ${{ env.VFULL }} into package.json"
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ env.VFULL }}\"/" package.json
          cat package.json | grep '"version"'  # Optional: Verify the change
          yarn build:linux

      - name: Pack artifacts
        id: pack_artifacts
        run: |
          OS_NAME="ubuntu-x64"
          BIN_NAME="ubuntu-x64"
          echo "Artifact: mor-launch-${{ env.TAG_NAME }}-$OS_NAME.zip"
          echo "LLAMA Binary: ${{ env.LLAMA_URL }}/${{ env.LLAMA_RELEASE }}/${{ env.LLAMA_FILEBASE }}-$BIN_NAME.zip"
          echo "LLAMA Model: ${{ env.MODEL_URL }}/${{ env.MODEL_OWNER }}/${{ env.MODEL_REPO }}/resolve/main/${{ env.MODEL_NAME }}"
          wget -nv ${{ env.LLAMA_URL }}/${{ env.LLAMA_RELEASE }}/${{ env.LLAMA_FILEBASE }}-$BIN_NAME.zip
          wget -nv ${{ env.MODEL_URL }}/${{ env.MODEL_OWNER }}/${{ env.MODEL_REPO }}/resolve/main/${{ env.MODEL_NAME }}
          unzip -o -j ${{ env.LLAMA_FILEBASE}}-$BIN_NAME.zip build/bin/llama-server
          echo '{
            "run": [
              "./llama-server --no-webui -m ./'"${{ env.MODEL_NAME }}"'",
              "./proxy-router",
              "./morpheus-ui-'${{ env.VFULL }}'-x86_64-linux.AppImage"
            ]
          }' > mor-launch.json

          echo "############# Contents of mor-launch.json: ############# "
          cat mor-launch.json

          mv ./cli/mor-cli mor-cli
          zip -j mor-launch-${{ env.TAG_NAME }}-$OS_NAME.zip ./LICENSE ./launcher/mor-launch llama-server ./proxy-router/proxy-router .env ${{ env.MODEL_NAME}} mor-launch.json ./ui-desktop/dist/morpheus-ui-${{ env.VFULL }}-x86_64-linux.AppImage models-config.json rating-config.json mor-cli

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: mor-launch-${{ env.TAG_NAME }}-ubuntu-x64.zip
          name: mor-launch-ubuntu-x64.zip

  macOS-13-x64:
    name: Build macOS-x64 Image
    if: |
      github.repository != 'MorpheusAIs/Morpheus-Lumerin-Node' &&
      (
        (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test' || github.ref == 'refs/heads/dev')) ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      )
    runs-on: macos-13
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          
      - name: Generate Tag Name
        uses: ./.github/actions/gen_tag_name    

      - name: Verify environment variables
        run: |
          echo "TAG_NAME=${{ env.TAG_NAME }}"
          echo "VTAG=${{ env.VTAG }}"
          echo "VFULL=${{ env.VFULL }}" 
          echo "IMAGE_NAME_BASE=${{ env.IMAGE_NAME_BASE }}"
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"       
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          cache-dependency-path: |
            launcher/go.sum
            proxy-router/go.sum

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
          cache-dependency-path: ui-desktop/yarn.lock

      - name: Install dependencies
        run: |
          cd launcher
          go mod tidy
          cd ../proxy-router
          go mod download
          cd ../ui-desktop
          python3 -m pip install setuptools
          yarn install --network-timeout 600000

      - name: Copy Environment Files
        uses: ./.github/actions/copy_env_files

      - name: Build
        id: build
        run: |
          cd launcher
          make
          cd ../proxy-router
          make build
          cd ../cli
          make build
          cd ../ui-desktop
          echo "Injecting version ${{ env.VFULL }} into package.json"
          sed -i "" "s/\"version\": \".*\"/\"version\": \"${{ env.VFULL }}\"/" package.json
          cat package.json | grep '"version"'  # Optional: Verify the change
          yarn build:mac

      - name: Pack artifacts
        id: pack_artifacts
        run: |
          OS_NAME="macos-x64"
          BIN_NAME="macos-x64"
          echo "Artifact: mor-launch-${{ env.TAG_NAME }}-$OS_NAME.zip"
          echo "LLAMA Binary: ${{ env.LLAMA_URL }}/${{ env.LLAMA_RELEASE }}/${{ env.LLAMA_FILEBASE }}-$BIN_NAME.zip"
          echo "LLAMA Model: ${{ env.MODEL_URL }}/${{ env.MODEL_OWNER }}/${{ env.MODEL_REPO }}/resolve/main/${{ env.MODEL_NAME }}"
          wget -nv ${{ env.LLAMA_URL }}/${{ env.LLAMA_RELEASE }}/${{ env.LLAMA_FILEBASE }}-$BIN_NAME.zip
          wget -nv ${{ env.MODEL_URL }}/${{ env.MODEL_OWNER }}/${{ env.MODEL_REPO }}/resolve/main/${{ env.MODEL_NAME }}
          unzip -o -j ${{ env.LLAMA_FILEBASE}}-$BIN_NAME.zip build/bin/llama-server
          echo '{
            "run": [
              "./llama-server --no-webui -m ./'"${{ env.MODEL_NAME }}"'",
              "./proxy-router",
              "./MorpheusUI.app/Contents/MacOS/MorpheusUI"
            ]
          }' > mor-launch.json
          echo "############# Contents of mor-launch.json: ############# "
          cat mor-launch.json
          mv ./cli/mor-cli mor-cli
          unzip ./ui-desktop/dist/morpheus-ui-${{ env.VFULL }}-x64-mac.zip
          zip -j mor-launch-${{ env.TAG_NAME }}-$OS_NAME.zip ./LICENSE ./launcher/mor-launch llama-server ./proxy-router/proxy-router .env ${{ env.MODEL_NAME}} mor-launch.json models-config.json rating-config.json mor-cli
          zip -r mor-launch-${{ env.TAG_NAME }}-$OS_NAME.zip 'MorpheusUI.app'

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: mor-launch-${{ env.TAG_NAME }}-macos-x64.zip
          name: mor-launch-macos-x64.zip

  macOS-14-arm64:
    name: Build macOS-arm64 Image
    if: |
      github.repository != 'MorpheusAIs/Morpheus-Lumerin-Node' &&
      (
        (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test' || github.ref == 'refs/heads/dev')) ||
        (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'test' || github.base_ref == 'dev')) ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      )
    runs-on: macos-14
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      
      - name: Generate Tag Name
        uses: ./.github/actions/gen_tag_name

      - name: Verify environment variables
        run: |
          echo "TAG_NAME=${{ env.TAG_NAME }}"
          echo "VTAG=${{ env.VTAG }}"
          echo "VFULL=${{ env.VFULL }}" 
          echo "IMAGE_NAME_BASE=${{ env.IMAGE_NAME_BASE }}"
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"       

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          cache-dependency-path: |
            launcher/go.sum
            proxy-router/go.sum

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
          cache-dependency-path: ui-desktop/yarn.lock

      - name: Install dependencies
        run: |
          cd launcher
          go mod tidy
          cd ../proxy-router
          go mod download
          cd ../ui-desktop
          brew install python-setuptools
          yarn install --network-timeout 600000

      - name: Copy Environment Files
        uses: ./.github/actions/copy_env_files
      
      - name: Build
        id: build
        run: |
          cd launcher
          make
          cd ../proxy-router
          make build
          cd ../cli
          make build
          cd ../ui-desktop
          echo "Injecting version ${{ env.VFULL }}} into package.json"
          sed -i "" "s/\"version\": \".*\"/\"version\": \"${{ env.VFULL }}\"/" package.json
          cat package.json | grep '"version"'  # Optional: Verify the change
          yarn build:mac

      - name: Pack artifacts
        id: pack_artifacts
        run: |
          OS_NAME="macos-arm64"
          BIN_NAME="macos-arm64"
          echo "Artifact: mor-launch-${{ env.TAG_NAME }}-$OS_NAME.zip"
          echo "LLAMA Binary: ${{ env.LLAMA_URL }}/${{ env.LLAMA_RELEASE }}/${{ env.LLAMA_FILEBASE }}-$BIN_NAME.zip"
          echo "LLAMA Model: ${{ env.MODEL_URL }}/${{ env.MODEL_OWNER }}/${{ env.MODEL_REPO }}/resolve/main/${{ env.MODEL_NAME }}"
          wget -nv ${{ env.LLAMA_URL }}/${{ env.LLAMA_RELEASE }}/${{ env.LLAMA_FILEBASE }}-$BIN_NAME.zip
          wget -nv ${{ env.MODEL_URL }}/${{ env.MODEL_OWNER }}/${{ env.MODEL_REPO }}/resolve/main/${{ env.MODEL_NAME }}
          unzip -o -j ${{ env.LLAMA_FILEBASE}}-$BIN_NAME.zip build/bin/llama-server
          echo '{
            "run": [
              "./llama-server --no-webui -m ./'"${{ env.MODEL_NAME }}"'",
              "./proxy-router",
              "./MorpheusUI.app/Contents/MacOS/MorpheusUI"
            ]
          }' > mor-launch.json
          echo "############# Contents of mor-launch.json: ############# "
          cat mor-launch.json
          mv ./cli/mor-cli mor-cli
          unzip ./ui-desktop/dist/morpheus-ui-${{ env.VFULL }}-arm64-mac.zip
          zip -j mor-launch-${{ env.TAG_NAME }}-$OS_NAME.zip ./LICENSE ./launcher/mor-launch llama-server ./proxy-router/proxy-router .env ${{ env.MODEL_NAME}} mor-launch.json models-config.json rating-config.json mor-cli
          zip -r mor-launch-${{ env.TAG_NAME }}-$OS_NAME.zip 'MorpheusUI.app'

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: mor-launch-${{ env.TAG_NAME }}-macos-arm64.zip
          name: mor-launch-macos-arm64.zip

  Windows-avx2-x64:
    name: Build Windows Image
    if: |
      github.repository != 'MorpheusAIs/Morpheus-Lumerin-Node' &&
      (
        (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test' || github.ref == 'refs/heads/dev')) ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      )
    runs-on: windows-latest
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          
      - name: Generate Tag Name
        uses: ./.github/actions/gen_tag_name    
      
      - name: Verify environment variables
        run: |
          echo "TAG_NAME=${{ env.TAG_NAME }}"
          echo "VTAG=${{ env.VTAG }}"
          echo "VFULL=${{ env.VFULL }}" 
          echo "IMAGE_NAME_BASE=${{ env.IMAGE_NAME_BASE }}"
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"       

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          cache-dependency-path: |
            launcher/go.sum
            proxy-router/go.sum

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
          cache-dependency-path: ui-desktop/yarn.lock

      - name: Install wget and sed
        run: |
          choco install wget --no-progress
          choco install sed --no-progress

      - name: Install dependencies
        run: |
          cd launcher
          go mod tidy
          cd ../proxy-router
          go mod download
          cd ../ui-desktop
          yarn install --network-timeout 600000

      - name: Copy Environment Files
        uses: ./.github/actions/copy_env_files
      
      - name: Build
        id: build
        run: |
          cd launcher
          make
          cd ../proxy-router
          make build
          cd ../cli
          make build
          cd ../ui-desktop
          mv .env .env.tmp
          sed 's|\./.cookie|.\\.cookie|g' .env.tmp > .env
          echo "Injecting version ${{ env.VFULL }} into package.json"
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ env.VFULL }}\"/" package.json
          cat package.json | grep '"version"'  # Optional: Verify the change
          yarn build:win

      - name: Pack artifacts
        id: pack_artifacts
        run: |
          OS_NAME="win-x64"
          BIN_NAME="win-avx2-x64"
          echo "Artifact: mor-launch-${{ env.TAG_NAME }}-$OS_NAME.zip"
          echo "LLAMA Binary: ${{ env.LLAMA_URL }}/${{ env.LLAMA_RELEASE }}/${{ env.LLAMA_FILEBASE }}-$BIN_NAME.zip"
          echo "LLAMA Model: ${{ env.MODEL_URL }}/${{ env.MODEL_OWNER }}/${{ env.MODEL_REPO }}/resolve/main/${{ env.MODEL_NAME }}"
          wget -nv ${{ env.LLAMA_URL }}/${{ env.LLAMA_RELEASE }}/${{ env.LLAMA_FILEBASE }}-$BIN_NAME.zip
          wget -nv ${{ env.MODEL_URL }}/${{ env.MODEL_OWNER }}/${{ env.MODEL_REPO }}/resolve/main/${{ env.MODEL_NAME }}
          unzip -o -j ${{ env.LLAMA_FILEBASE}}-$BIN_NAME.zip llama-server.exe llama.dll ggml.dll
          echo '{
            "run": [
              "./llama-server.exe --no-webui -m ./'"${{ env.MODEL_NAME }}"'",
              "./proxy-router.exe",
              "./morpheus-ui-'"${{ env.VFULL }}"'-x64-win.exe"
            ]
          }' > mor-launch.json
          echo "Contents of mor-launch.json: "
          cat mor-launch.json
          mv .env .env.tmp
          sed 's|\./data/|.\\data\\|g' .env.tmp > .env
          mv ./proxy-router/proxy-router proxy-router.exe
          mv ./cli/mor-cli mor-cli.exe
          mv ./launcher/mor-launch mor-launch.exe
          mv "./ui-desktop/dist/morpheus-ui-${{ env.VFULL }}-x64-win" morpheus-ui-${{ env.VFULL }}-x64-win.exe
          7z a mor-launch-${{ env.TAG_NAME }}-$OS_NAME.zip LICENSE mor-launch.exe proxy-router.exe .env llama-server.exe llama.dll ggml.dll ${{ env.MODEL_NAME}} mor-launch.json morpheus-ui-${{ env.VFULL }}-x64-win.exe models-config.json rating-config.json mor-cli.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: mor-launch-${{ env.TAG_NAME }}-win-x64.zip
          name: mor-launch-win-x64.zip

  Release:
    name: Create Release
    needs:
      - GHCR-Test
      - Ubuntu-22-x64
      - macOS-13-x64
      - macOS-14-arm64
      - Windows-avx2-x64
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          
      - name: Generate Tag Name
        uses: ./.github/actions/gen_tag_name    

      - name: Verify environment variables
        run: |
          echo "TAG_NAME=${{ env.TAG_NAME }}"
          echo "VTAG=${{ env.VTAG }}"
          echo "VFULL=${{ env.VFULL }}" 
          echo "IMAGE_NAME_BASE=${{ env.IMAGE_NAME_BASE }}"
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"       

      - name: Download artifacts
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          path: ./artifact

      - name: Move artifacts
        id: move_artifacts
        run: |
          mkdir -p ./artifact/release
          mv ./artifact/*/*.zip ./artifact/release

      - name: Create release
        id: create_release
        uses: anzz1/action-create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          prerelease: ${{ github.ref != 'refs/heads/main' }}

      - name: Upload release
        id: upload_release
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const path = require('path');
            const fs = require('fs');
            const release_id = '${{ steps.create_release.outputs.id }}';
            for (let file of await fs.readdirSync('./artifact/release')) {
              if (path.extname(file) === '.zip') {
                console.log('uploadReleaseAsset', file);
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: file,
                  data: await fs.readFileSync(`./artifact/release/${file}`)
                });
              }
            }

  GHCR-Test:
    name: Test Docker Image
    if: |
      github.repository != 'MorpheusAIs/Morpheus-Lumerin-Node' &&
      (
        (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test' || github.ref == 'refs/heads/dev')) ||
        (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'test' || github.base_ref == 'dev')) ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          
      - name: Generate Tag Name
        uses: ./.github/actions/gen_tag_name 

      - name: Verify environment variables
        run: |
          echo "TAG_NAME=${{ env.TAG_NAME }}"
          echo "VTAG=${{ env.VTAG }}"
          echo "VFULL=${{ env.VFULL }}" 
          echo "IMAGE_NAME_BASE=${{ env.IMAGE_NAME_BASE }}"
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"       

      - name: Build Docker Image to Test
        run: |
          docker build \
            --platform linux/amd64 \
            --build-arg TAG_NAME=${{ env.TAG_NAME }} \
            --build-arg COMMIT=${{ github.sha }} \
            --load \
            -t ${{ env.IMAGE_NAME }} \
            -f proxy-router/Dockerfile \
            proxy-router || (echo "Failed to build image with tag: ${{ env.IMAGE_NAME }}" && exit 1)

      - name: Run Docker Tests
        uses: ./.github/actions/docker_test
        with:
          image: ${{ env.IMAGE_NAME }}
          private_key: ${{ secrets.TEST_PRIVATE_KEY }}

  GHCR-Build-and-Push:
    name: Build & Push Docker Image
    if: |
      github.repository != 'MorpheusAIs/Morpheus-Lumerin-Node' &&
      (
        (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test' || github.ref == 'refs/heads/dev')) ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      )
    needs: 
      - GHCR-Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          
      - name: Generate Tag Name
        uses: ./.github/actions/gen_tag_name    
       
      - name: Verify environment variables
        run: |
          echo "TAG_NAME=${{ env.TAG_NAME }}"
          echo "VTAG=${{ env.VTAG }}"
          echo "VFULL=${{ env.VFULL }}" 
          echo "IMAGE_NAME_BASE=${{ env.IMAGE_NAME_BASE }}"
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"       

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Multi-Platform Docker Image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --build-arg TAG_NAME=${{ env.TAG_NAME }} \
            --build-arg COMMIT=${{ github.sha }} \
            --push \
            -t ${{ env.IMAGE_NAME }} \
            -f proxy-router/Dockerfile \
            proxy-router || (echo "Failed to push image with tag: ${{ env.IMAGE_NAME }}" && exit 1)

      - name: Optionally Push Latest Tag
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          echo "Tagging image as :latest"
          LATEST_IMAGE=${{ env.IMAGE_NAME_BASE }}:latest
          docker tag ${{ env.IMAGE_NAME }} $LATEST_IMAGE
          echo "Pushing image as :latest"
          docker push $LATEST_IMAGE || (echo "Failed to push image as :latest" && exit 1)          

  GitLab-Deploy:
    name: Deploy to GitLab
    needs: 
      - GHCR-Build-and-Push
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          
      - name: Generate Tag Name
        uses: ./.github/actions/gen_tag_name    
      
      - name: Verify environment variables
        run: |
          echo "TAG_NAME=${{ env.TAG_NAME }}"
          echo "VTAG=${{ env.VTAG }}"
          echo "VFULL=${{ env.VFULL }}" 
          echo "IMAGE_NAME_BASE=${{ env.IMAGE_NAME_BASE }}"
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"       

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Determine GitLab Target Branch
        id: set_target_branch
        run: |
          if [ "${{ github.ref_name }}" == "dev" ]; then
            echo "gitlab_branch=dev" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" == "test" ]; then
            echo "gitlab_branch=stg" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" == "main" ]; then
            echo "gitlab_branch=main" >> $GITHUB_ENV
          else
            echo "This branch is not configured to trigger GitLab pipelines."
            exit 1
          fi

      - name: Trigger GitLab Pipeline
        run: |
          echo "Triggering GitLab Build and Deploy for branch ${{ github.ref_name }} with tag ${{ env.TAG_NAME }}"
      
          # Send request to GitLab
          response=$(curl --silent \
            --request POST \
            --url "${{ secrets.GITLAB_TRIGGER_URL }}" \
            --form "token=${{ secrets.GITLAB_TRIGGER_TOKEN }}" \
            --form "ref=${{ env.gitlab_branch }}" \
            --form "variables[SOURCE_REPO]=${{ github.repository }}" \
            --form "variables[SOURCE_BRANCH]=${{ github.ref_name }}" \
            --form "variables[GITHUB_VFULL]=${{ env.VFULL }}" \
            --form "variables[GITHUB_TAG]=${{ env.TAG_NAME }}")
      
          # Parse JSON response using jq
          gitlab_status=$(echo "$response" | jq -r '.status // "unknown"')
          gitlab_web_url=$(echo "$response" | jq -r '.web_url // "N/A"')
      
          # Log the response
          echo "GitLab Response: $response"
      
          # Validate the status field
          if [[ "$gitlab_status" =~ ^(created|preparing|success|running|scheduled)$ ]]; then
            echo "GitLab pipeline triggered successfully! Status: $gitlab_status"
            echo "Pipeline details: $gitlab_web_url"
          else
            echo "GitLab pipeline FAILED. Invalid status: $gitlab_status"
            echo "Pipeline details: $gitlab_web_url"
            exit 1
          fi
